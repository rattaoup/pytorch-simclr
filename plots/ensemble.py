import matplotlib.pyplot as plt
import numpy as np


def se(array, axis=0):
    return array.std(axis=axis) / np.sqrt(array.shape[axis])


if __name__ == '__main__':
    gp_fa = [[(93.4, 0.19084855914115906), (94.52, 0.16708481311798096), (94.71, 0.16115325689315796),
                       (94.73, 0.15988996624946594), (94.69, 0.15886880457401276), (94.76, 0.15774832665920258),
                       (94.79, 0.15716587007045746), (94.75, 0.15680773556232452), (94.77, 0.15641529858112335),
                       (94.84, 0.1561741977930069)],
                      [(93.58, 0.18735511600971222), (94.48, 0.16065604984760284), (94.66, 0.15743771195411682),
                       (94.75, 0.15562307834625244), (94.74, 0.1553688794374466), (94.7, 0.1548636257648468),
                       (94.72, 0.15395040810108185), (94.75, 0.1541283130645752), (94.81, 0.1539543867111206),
                       (94.76, 0.15337489545345306)],
                      [(93.55, 0.18709571659564972), (94.52, 0.16025693714618683), (94.84, 0.15642397105693817),
                       (94.77, 0.1557120978832245), (94.79, 0.1545531451702118), (94.83, 0.15411685407161713),
                       (94.78, 0.1541195511817932), (94.8, 0.15403395891189575), (94.8, 0.15365758538246155),
                       (94.89, 0.15360258519649506)]
                      ]

    gp_ensemble = [[(93.74, 0.2554), (94.43, 0.2452), (94.6, 0.2433), (94.62, 0.2426), (94.56, 0.2425),
                    (94.59, 0.2427), (94.65, 0.2425), (94.63, 0.2420), (94.67, 0.2421), (94.68, 0.2421)],
                    [(93.75, 0.2524), (94.52, 0.2422), (94.69, 0.2399), (94.87, 0.2391), (94.79, 0.2383),
                     (94.88, 0.2379), (94.85, 0.2375), (94.88, 0.2374), (94.87, 0.2373), (94.8, 0.2373)],
                    [(93.75, 0.2506), (94.34, 0.2408), (94.62, 0.2391), (94.64, 0.2371), (94.64, 0.2368),
                     (94.75, 0.2367), (94.77, 0.2369), (94.72, 0.2368), (94.72, 0.2367), (94.77, 0.2365)]
                   ]

    cifar10_base = [
        [(93.47, 0.1958623081445694), (94.36, 0.16706432402133942), (94.41, 0.16388462483882904),
         (94.49, 0.16236217319965363), (94.56, 0.1612444818019867), (94.65, 0.16010713577270508),
         (94.56, 0.15985429286956787), (94.53, 0.15996643900871277), (94.51, 0.15953053534030914),
         (94.58, 0.15934737026691437)],
        [(93.46, 0.19429568946361542), (94.24, 0.16980035603046417), (94.42, 0.1646382063627243),
         (94.64, 0.16256791353225708), (94.58, 0.16126218438148499), (94.63, 0.16036824882030487),
         (94.75, 0.15990084409713745), (94.76, 0.15909987688064575), (94.68, 0.15903064608573914),
         (94.62, 0.15868017077445984)],
        [(93.31, 0.19524863362312317), (94.17, 0.17107221484184265), (94.31, 0.16376088559627533),
         (94.48, 0.16253380477428436), (94.54, 0.16132250428199768), (94.56, 0.16071796417236328),
         (94.55, 0.16038447618484497), (94.61, 0.1599552184343338), (94.61, 0.15996932983398438),
         (94.59, 0.1597975790500641)]
    ]

    no_gp = [{
        'fa': [(93.29, 0.1928812712430954), (94.28, 0.1681467741727829), (94.53, 0.16364863514900208), (94.65, 0.16164171695709229), (94.51, 0.16176356375217438), (94.59, 0.161569744348526), (94.63, 0.16096344590187073), (94.61, 0.16113333404064178), (94.66, 0.16045020520687103), (94.68, 0.16003276407718658)],
        'ensemble': [(93.65, 0.2570), (94.44, 0.2470), (94.58, 0.2450), (94.56, 0.2440), (94.61, 0.2438), (94.64, 0.2436), (94.72, 0.2437), (94.73, 0.2438), (94.73, 0.2435), (94.7, 0.2433)]
                },
            {
                'fa': [(93.18, 0.193656325340271), (94.04, 0.16907265782356262), (94.38, 0.16372907161712646), (94.47, 0.16212764382362366), (94.44, 0.16086365282535553), (94.52, 0.16089016199111938), (94.53, 0.16069136559963226), (94.51, 0.16035357117652893), (94.54, 0.1597883105278015), (94.57, 0.15952177345752716)]
,               'ensemble': [(93.59, 0.2572), (94.35, 0.2466), (94.51, 0.2449), (94.64, 0.2442), (94.66, 0.2439), (94.63, 0.2440), (94.76, 0.2436), (94.71, 0.2435), (94.68, 0.2433), (94.68, 0.2432)]
            },
            {
                'fa': [(93.0, 0.19567561149597168), (94.08, 0.16976884007453918), (94.32, 0.16544456779956818), (94.41, 0.16430139541625977), (94.52, 0.16282393038272858), (94.56, 0.16202335059642792), (94.65, 0.1612977683544159), (94.63, 0.16066259145736694), (94.61, 0.15990793704986572), (94.62, 0.1593722701072693)],
                'ensemble': [(93.62, 0.2582), (94.19, 0.2485), (94.32, 0.2456), (94.51, 0.2448), (94.47, 0.2441), (94.4, 0.2439), (94.49, 0.2437), (94.5, 0.2437), (94.44, 0.2434), (94.42, 0.2432)]
            }
    ]

    plt.figure(figsize=(4, 2))

    m = np.linspace(5, 100, 10)

    ## Plot the accuracy
    i = 1
    acc_fa_gp = np.array([[x[i] for x in a] for a in gp_fa])
    acc_fa_base = np.array([[x[i] for x in a] for a in cifar10_base])
    acc_ensemble_gp = np.array([[x[i] for x in a] for a in gp_ensemble])
    acc_ensemble_base = np.array([[x[i] for x in a['ensemble']] for a in no_gp])

    col = '#1f77b4'
    mean, s = acc_fa_base.mean(0), se(acc_fa_base)
    plt.plot(m, mean, color=col, marker='o', markersize=7, markeredgewidth=0.)
    plt.fill_between(m, mean + s, mean - s, alpha=0.15, color=col)
    col = 'tab:olive'
    mean, s = acc_ensemble_base.mean(0), se(acc_ensemble_base)
    plt.plot(m, mean, color=col, marker='*', markersize=7, markeredgewidth=0., linestyle='--')
    plt.fill_between(m, mean + s, mean - s, alpha=0.15, color=col)

    # col = 'tab:orange'
    # mean, s = acc_fa_gp.mean(0), se(acc_fa_gp)
    # plt.plot(m, mean, color=col, marker='x', markersize=7)
    # plt.fill_between(m, mean + s, mean - s, alpha=0.15, color=col)
    # col = 'tab:brown'
    # mean, s = acc_ensemble_gp.mean(0), se(acc_ensemble_gp)
    # plt.plot(m, mean, color=col, marker='|', markersize=7, linestyle='--')
    # plt.fill_between(m, mean + s, mean - s, alpha=0.15, color=col)

    plt.xlabel('$M$')
    plt.ylabel('Test loss')
    plt.legend(['Feature averaging', 'Augmentation ensembling'], frameon=False)
    plt.show()



    
